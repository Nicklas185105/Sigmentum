// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sigmentum.Infrastructure.Persistence.DbContext;

#nullable disable

namespace Sigmentum.Migrations
{
    [DbContext(typeof(SigmentumDbContext))]
    partial class SigmentumDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Sigmentum.Infrastructure.Persistence.Entities.ErrorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Exception")
                        .HasColumnType("text");

                    b.Property<bool>("IsTest")
                        .HasColumnType("boolean");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("Sigmentum.Infrastructure.Persistence.Entities.EvaluationResultEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EvaluatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsTest")
                        .HasColumnType("boolean");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SignalType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EvaluationResults");
                });

            modelBuilder.Entity("Sigmentum.Infrastructure.Persistence.Entities.ScanEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IndicatorsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsTest")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ScannedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Scans");
                });

            modelBuilder.Entity("Sigmentum.Infrastructure.Persistence.Entities.SignalEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("EntryPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Indicator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPending")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTest")
                        .HasColumnType("boolean");

                    b.Property<string>("SignalType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("SignalValue")
                        .HasColumnType("numeric");

                    b.Property<string>("StrategyVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SymbolId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TriggeredAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IsPending");

                    b.HasIndex("SymbolId", "TriggeredAt");

                    b.HasIndex("SymbolId", "Exchange", "SignalType", "TriggeredAt")
                        .IsUnique();

                    b.ToTable("Signals");
                });

            modelBuilder.Entity("Sigmentum.Infrastructure.Persistence.Entities.SymbolEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsStock")
                        .HasColumnType("boolean");

                    b.Property<int>("LossCount")
                        .HasColumnType("integer");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WinCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Symbols");
                });

            modelBuilder.Entity("Sigmentum.Infrastructure.Persistence.Entities.SignalEntity", b =>
                {
                    b.HasOne("Sigmentum.Infrastructure.Persistence.Entities.SymbolEntity", "Symbol")
                        .WithMany("Signals")
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("Sigmentum.Infrastructure.Persistence.Entities.SymbolEntity", b =>
                {
                    b.Navigation("Signals");
                });
#pragma warning restore 612, 618
        }
    }
}
